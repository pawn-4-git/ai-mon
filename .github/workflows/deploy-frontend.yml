# .github/workflows/deploy.yml
name: Deploy Next.js App to GitHub Pages

on:
  push:
    branches: [ main ] # mainブランチへのプッシュでこのワークフローが実行されます

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # ビルド環境としてUbuntuを使用
    permissions:
      contents: write # リポジトリへの書き込み権限
      pages: write # GitHub Pagesへのデプロイ権限
      id-token: write # OpenID Connect (OIDC) トークンを要求する権限

    env:
      # GitHub Pagesのベースパスを設定
      # 例: リポジトリ名が "my-nextjs-repo" なら "/my-nextjs-repo" となる
      NEXT_PUBLIC_BASE_PATH: /${{ github.event.repository.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # リポジトリのコードをチェックアウト

      - name: Setup Node.js
        uses: actions/setup-node@v4 # Node.js環境をセットアップ
        with:
          node-version: '20' # 使用するNode.jsのバージョンを指定（あなたのアプリに合わせて変更）

      - name: Install dependencies
        run: npm install
        working-directory: ./frontend # ★ Next.jsアプリのディレクトリを指定

      - name: Build Next.js project
        run: npm run build
        working-directory: ./frontend # ★ Next.jsアプリのディレクトリを指定
        env:
          # GitHub Secrets から API ドメインを取得して環境変数として渡す
          # secrets.API_DOMAIN は、リポジトリの Settings > Secrets and variables > Actions で設定したシークレット名に置き換えてください。
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.API_DOMAIN }}
          # 他に必要なシークレットがあればここに追加します
          # NEXT_PUBLIC_ANOTHER_KEY: ${{ secrets.ANOTHER_KEY }}
          # DATABASE_URL: ${{ secrets.DATABASE_URL }} # サーバーサイドのみで使う場合

      #- name: Add timestamp to apiClient.js
      #  run: node scripts/add-timestamp.js

      - name: Upload artifact
        # Next.jsの静的エクスポートの出力は通常 'out' ディレクトリ
        uses: actions/upload-pages-artifact@v3
        with:
          path: './frontend/out' # ★ ビルド結果の 'out' ディレクトリを指定

      #- name: Deploy to GitHub Pages
      #  id: deployment
      #  uses: actions/deploy-pages@v4 # GitHub Pagesへのデプロイアクション

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # 必要に応じてセッショントークンも指定
          aws-region: ap-northeast-1 # ここにバケットを作成したいAWSリージョンを指定してください (例: ap-northeast-1)
          role-to-assume: ${{secrets.AWS_S3_ROLE}}

      - name: Create S3 bucket if it doesn't exist
        run: |
          aws s3 ls s3://ai-mon-app || aws s3 mb s3://ai-mon-app --region ap-northeast-1 # ここもリージョンを合わせてください

       # - name: Set bucket policy for CloudFront access
        #run: |
        #   aws s3api put-bucket-policy --bucket ai-mon-contents-files --policy '{"Version": "2012-10-17", "Statement": [{"Sid": "AllowCloudFrontPublicRead", "Effect": "Allow", "Principal": {"AWS": "*"}, "Action": ["s3:GetObject"], "Resource": ["arn:aws:s3:::ai-mon-contents-files/*"]}]}' --region ap-northeast-1
        # env:
          # AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          # role-to-assume: ${{secrets.AWS_S3_ROLE}}

      - name: Sync frontend-s3 directory to S3 bucket
        run: aws s3 sync ./frontend/out s3://ai-mon-app/ai-mon/ --delete # frontend-s3 ディレクトリを同期し、不要なファイルは削除

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        env:
          # CLOUDFRONT_DISTRIBUTION_ID は、リポジトリの Settings > Secrets and variables > Actions で設定してください
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }} # 必要に応じて
          role-to-assume: ${{secrets.AWS_S3_ROLE}}
