AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  usersRegister

  Sample SAM Template for usersRegister

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
Parameters:
  UsersTableName:
    Type: String
    Description: The name of the DynamoDB table for users.
  SessionsTableName:
    Type: String
    Description: The name of the DynamoDB table for sessions.
  ScoresTableName:
    Type: String
    Description: The name of the DynamoDB table for scores.
  ResourcesTableName:
    Type: String
    Description: The name of the DynamoDB table for resources.
  QuizGroupsTableName:
    Type: String
    Description: The name of the DynamoDB table for quiz groups.
  QuestionsTableName:
    Type: String
    Description: The name of the DynamoDB table for questions.

Resources:
  SharedLogicLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ../nodejs/
      CompatibleRuntimes:
        - nodejs22.x # 使用するLambdaのランタイムに合わせて指定 (例: nodejs18.x, nodejs20.x など)
      Description: My shared utility functions.

  UsersRegisterFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: usersRegister/
      Handler: app.lambdaHandler
      Runtime: nodejs22.x
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        UsersRegisterEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /users/register
            Method: post

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  UsersRegisterApi:
    Description: API Gateway endpoint URL for Prod stage for Users Register function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/users/register/"
  UsersRegisterFunction:
    Description: Users Register Lambda Function ARN
    Value: !GetAtt UsersRegisterFunction.Arn
  SharedLogicLayerArn:
    Description: "ARN of the shared logic Lambda Layer"
    Value: !Ref SharedLogicLayer # LayerのARNを出力
