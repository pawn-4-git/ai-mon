AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AI-Mon Backend API

  SAM Template for AI-Mon Lambda Functions

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs22.x
    LoggingConfig:
      LogFormat: JSON

Parameters:
  UsersTableName:
    Type: String
    Description: The name of the DynamoDB table for users.
    Default: UsersTable
  SessionsTableName:
    Type: String
    Description: The name of the DynamoDB table for sessions.
    Default: SessionsTable
  ScoresTableName:
    Type: String
    Description: The name of the DynamoDB table for scores.
    Default: ScoresTable
  ResourcesTableName:
    Type: String
    Description: The name of the DynamoDB table for resources.
    Default: ResourcesTable
  QuizGroupsTableName:
    Type: String
    Description: The name of the DynamoDB table for quiz groups.
    Default: QuizGroupsTable
  QuestionsTableName:
    Type: String
    Description: The name of the DynamoDB table for questions.
    Default: QuestionsTable
  AimonSecretName:
    Type: String
    Description: The name of the secret containing application configurations.
    Default: ai-mon-secret

Resources:
  SharedLogicLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ../nodejs/
      CompatibleRuntimes:
        - nodejs22.x
      Description: Shared utility functions for AI-Mon application.

  UsersRegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: usersRegister/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        UsersRegisterEvent:
          Type: Api
          Properties:
            Path: /users/register
            Method: post
  UsersLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: usersLogin/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        UsersLoginEvent:
          Type: Api
          Properties:
            Path: /users/login
            Method: post

  UsersGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: usersGet/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTableName
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AimonSecretName}-*"
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
          AIMON_SECRET_NAME: !Ref AimonSecretName
      Events:
        UsersGetEvent:
          Type: Api
          Properties:
            Path: /users/get
            Method: get

  UsersLogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: usersLogout/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        UsersLogoutEvent:
          Type: Api
          Properties:
            Path: /users/logout
            Method: post

  UsersDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: usersDelete/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        UsersDeleteEvent:
          Type: Api
          Properties:
            Path: /users/{userId}
            Method: delete

  QuizGroupsCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: quizGroupsCreate/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref QuizGroupsTableName
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AimonSecretName}-*"
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
          AIMON_SECRET_NAME: !Ref AimonSecretName
      Events:
        QuizGroupsCreateEvent:
          Type: Api
          Properties:
            Path: /quiz-groups
            Method: post

  QuizGroupsListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: quizGroupsList/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBReadPolicy:
            TableName: !Ref QuizGroupsTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        QuizGroupsListEvent:
          Type: Api
          Properties:
            Path: /quiz-groups
            Method: get

  QuizGroupsGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: quizGroupsGet/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBReadPolicy:
            TableName: !Ref QuizGroupsTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        QuizGroupsGetEvent:
          Type: Api
          Properties:
            Path: /quiz-groups/{groupId}
            Method: get

  QuizGroupsUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: quizGroupsUpdate/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref QuizGroupsTableName
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AimonSecretName}-*"
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
          AIMON_SECRET_NAME: !Ref AimonSecretName
      Events:
        QuizGroupsUpdateEvent:
          Type: Api
          Properties:
            Path: /quiz-groups/{groupId}
            Method: put

  QuizGroupsDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: quizGroupsDelete/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref QuizGroupsTableName
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AimonSecretName}-*"
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
          AIMON_SECRET_NAME: !Ref AimonSecretName
      Events:
        QuizGroupsDeleteEvent:
          Type: Api
          Properties:
            Path: /quiz-groups/{groupId}
            Method: delete

  QuestionsCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: questionsCreate/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref QuestionsTableName
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AimonSecretName}-*"
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
          AIMON_SECRET_NAME: !Ref AimonSecretName
      Events:
        QuestionsCreateEvent:
          Type: Api
          Properties:
            Path: /quiz-groups/{groupId}/questions
            Method: post

  QuestionsListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: questionsList/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBReadPolicy:
            TableName: !Ref QuestionsTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        QuestionsListEvent:
          Type: Api
          Properties:
            Path: /quiz-groups/{groupId}/questions
            Method: get

  QuestionsGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: questionsGet/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBReadPolicy:
            TableName: !Ref QuestionsTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        QuestionsGetEvent:
          Type: Api
          Properties:
            Path: /questions/{questionId}
            Method: get

  QuestionsUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: questionsUpdate/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref QuestionsTableName
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AimonSecretName}-*"
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
          AIMON_SECRET_NAME: !Ref AimonSecretName
      Events:
        QuestionsUpdateEvent:
          Type: Api
          Properties:
            Path: /questions/{questionId}
            Method: put

  QuestionsDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: questionsDelete/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref QuestionsTableName
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AimonSecretName}-*"
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
          AIMON_SECRET_NAME: !Ref AimonSecretName
      Events:
        QuestionsDeleteEvent:
          Type: Api
          Properties:
            Path: /questions/{questionId}
            Method: delete

  AnswersSubmitFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: answersSubmit/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref ScoresTableName
        - DynamoDBReadPolicy:
            TableName: !Ref QuestionsTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        AnswersSubmitEvent:
          Type: Api
          Properties:
            Path: /quizzes/{quizId}/answers
            Method: post

  ResultsGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: resultsGet/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBReadPolicy:
            TableName: !Ref ScoresTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        ResultsGetEvent:
          Type: Api
          Properties:
            Path: /quizzes/{quizId}/results
            Method: get

  ScoreHistoryGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: scoreHistoryGet/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBReadPolicy:
            TableName: !Ref ScoresTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        ScoreHistoryGetEvent:
          Type: Api
          Properties:
            Path: /scores
            Method: get

  ScoresCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: scoresCreate/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref ScoresTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        ScoresCreateEvent:
          Type: Api
          Properties:
            Path: /scores
            Method: post

  ScoresDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: scoresDelete/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref ScoresTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        ScoresDeleteEvent:
          Type: Api
          Properties:
            Path: /scores/{scoreId}
            Method: delete

  PerformanceAnalysisGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: performanceAnalysisGet/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBReadPolicy:
            TableName: !Ref ScoresTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        PerformanceAnalysisGetEvent:
          Type: Api
          Properties:
            Path: /users/{userId}/performance-analysis
            Method: get

  ResourcesCreateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: resourcesCreate/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref ResourcesTableName
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AimonSecretName}-*"
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
          AIMON_SECRET_NAME: !Ref AimonSecretName
      Events:
        ResourcesCreateEvent:
          Type: Api
          Properties:
            Path: /quiz-groups/{groupId}/resources
            Method: post

  ResourcesListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: resourcesList/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBReadPolicy:
            TableName: !Ref ResourcesTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        ResourcesListEvent:
          Type: Api
          Properties:
            Path: /quiz-groups/{groupId}/resources
            Method: get

  ResourcesDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: resourcesDelete/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBCrudPolicy:
            TableName: !Ref ResourcesTableName
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AimonSecretName}-*"
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
          AIMON_SECRET_NAME: !Ref AimonSecretName
      Events:
        ResourcesDeleteEvent:
          Type: Api
          Properties:
            Path: /resources/{resourceId}
            Method: delete

  AiGenerateQuestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: aiGenerateQuestion/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - DynamoDBWritePolicy:
            TableName: !Ref QuestionsTableName
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AimonSecretName}-*"
        - Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource:
              - !Sub "arn:aws:bedrock:ap-northeast-1::foundation-model/amazon.nova-lite-v1:0"
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
          AIMON_SECRET_NAME: !Ref AimonSecretName
      Events:
        AiGenerateQuestionEvent:
          Type: Api
          Properties:
            Path: /ai/generate-question
            Method: post

  AiGenerateChoicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: aiGenerateChoices/
      Handler: app.lambdaHandler
      Timeout: 30
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
        - Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AimonSecretName}-*"
        - Statement:
          - Effect: Allow
            Action:
              - bedrock:InvokeModel
            Resource:
              - !Sub "arn:aws:bedrock:ap-northeast-1::foundation-model/amazon.nova-lite-v1:0"
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
          AIMON_SECRET_NAME: !Ref AimonSecretName
      Events:
        AiGenerateChoicesEvent:
          Type: Api
          Properties:
            Path: /ai/generate-choices
            Method: post

  UsersInactiveDeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Layers:
        - !Ref SharedLogicLayer
      CodeUri: usersInactiveDelete/
      Handler: app.lambdaHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref SessionsTableName
        - DynamoDBWritePolicy:
            TableName: !Ref UsersTableName
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTableName
          SESSIONS_TABLE_NAME: !Ref SessionsTableName
          SCORES_TABLE_NAME: !Ref ScoresTableName
          RESOURCES_TABLE_NAME: !Ref ResourcesTableName
          QUIZ_GROUPS_TABLE_NAME: !Ref QuizGroupsTableName
          QUESTIONS_TABLE_NAME: !Ref QuestionsTableName
      Events:
        UsersInactiveDeleteEvent:
          Type: Api
          Properties:
            Path: /users/inactive
            Method: delete

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
  AimonOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub 'AimonOAC-${AWS::StackName}'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  AimonCloudfront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: AimonApiGatewayOrigin
            DomainName: !Sub '${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com'
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
          - Id: AimonContentsS3Origin
            DomainName: !Sub 'ai-mon-contents-files.s3.amazonaws.com'
            OriginAccessControlId: !GetAtt AimonOAC.Id
            S3OriginConfig:
              OriginAccessIdentity: ''
          - Id: AimonAppS3Origin
            DomainName: !Sub 'ai-mon-app.s3.amazonaws.com'
            OriginAccessControlId: !GetAtt AimonOAC.Id
            S3OriginConfig:
              OriginAccessIdentity: ''
        CacheBehaviors:
          - TargetOriginId: AimonApiGatewayOrigin
            PathPattern: "/Prod*"
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: whitelist
                WhitelistedNames:
                  - username
                  - sessionId
                  - sessionVersionId
              Headers:
                - Accept
                - Accept-Language
                - Content-Language
                - Content-Type
                - Referer
                - User-Agent
                - X-Forwarded-For
                - X-Forwarded-Proto
          - TargetOriginId: AimonContentsS3Origin
            PathPattern: "/contents/*"
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
              Headers:
                - Referer
                - User-Agent
            MinTTL: 0
            DefaultTTL: 86400
            MaxTTL: 31536000
            SmoothStreaming: false
            Compress: true
          - TargetOriginId: AimonAppS3Origin
            PathPattern: "/ai-mon/*"
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
              Headers:
                - Referer
                - User-Agent
            MinTTL: 0
            DefaultTTL: 86400
            MaxTTL: 31536000
            SmoothStreaming: false
            Compress: true
        DefaultCacheBehavior:
          TargetOriginId: AimonAppS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
            Headers:
              - Referer
              - User-Agent
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
          SmoothStreaming: false
          Compress: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponsePagePath: /ai-mon/index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 0
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_All

Outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  SharedLogicLayerArn:
    Description: "ARN of the shared logic Lambda Layer"
    Value: !Ref SharedLogicLayer
  AimonCloudfrontDomainName:
    Description: "Domain name of the CloudFront distribution"
    Value: !GetAtt AimonCloudfront.DomainName